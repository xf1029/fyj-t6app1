package com.a51tgt.fyj.ui;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothDevice;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.pm.PackageInfo;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.text.TextUtils;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.ScrollView;
import android.widget.TextView;
import android.widget.Toast;

import com.a51tgt.fyj.MZApplication;
import com.a51tgt.fyj.R;
import com.a51tgt.fyj.bean.DeviceInfo;
import com.a51tgt.fyj.bean.DeviceInfoForUserData;
import com.a51tgt.fyj.bean.HttpResponseData;
import com.a51tgt.fyj.bean.UserDataUtils;
import com.a51tgt.fyj.bluetooth.BluetoothUtil;
import com.a51tgt.fyj.bluetooth.ClsUtils;
import com.a51tgt.fyj.comm.APIConstants;
import com.a51tgt.fyj.net.OkHttpClientManager;
import com.a51tgt.fyj.net.SendRequest;
import com.a51tgt.fyj.ui.view.DeviceInfoView;
import com.a51tgt.fyj.utils.CommUtil;
import com.a51tgt.fyj.utils.NetWorkUtils;
import com.a51tgt.fyj.utils.TipUtil;
import com.google.gson.internal.LinkedTreeMap;
import com.znq.zbarcode.CaptureActivity;

import java.util.ArrayList;
import java.util.Map;


public class FirstScanActivity extends BaseActivity{

	private String deviceMacAddress = "";
	private String deviceSSID = "";
	private Context mContext;
	private ScrollView sv_device, sv_introduce;
	private LinearLayout ll_device;
	private TextView tv_introduce, tv_menu;
	private boolean isEdit = false;
	private boolean quit = false;
	private DeviceSetDialog setDialog = new DeviceSetDialog();



	@SuppressLint("InflateParams") @Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[1];
//
		PackageManager packageManager =  getPackageManager();
		PackageInfo packInfo = null;
		try {
			String str =   this.getPackageName();

			packInfo = packageManager.getPackageInfo(str,0);
		} catch (PackageManager.NameNotFoundException e) {
			e.printStackTrace();
		}
		String version = packInfo.versionName;
		params[0] = new OkHttpClientManager.Param("ver","fyj_"+version);
		Log.i("xiazaidizhi","====="+"fyj_"+version);

		new SendRequest(APIConstants.Get_FYJApp_Info, params, new MyHandler(), 1);









		setContentView(R.layout.activity_first_scan);

//		CommUtil.setStatusBarBackgroundColor(FirstScanActivity.this);
		mContext = FirstScanActivity.this;
		sv_device = (ScrollView) findViewById(R.id.sv_device);
		sv_introduce = (ScrollView) findViewById(R.id.sv_introduce);
		ll_device = (LinearLayout) findViewById(R.id.ll_device);
		tv_introduce = (TextView) findViewById(R.id.tv_introduce);
		tv_menu = (TextView) findViewById(R.id.tv_menu);

		findViewById(R.id.bt_scan).setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View v) {

				int net_type = NetWorkUtils.getAPNType(mContext);
				if(net_type == 0 || net_type == 2){
					Toast.makeText(mContext, R.string.error_network_is_not_available, Toast.LENGTH_LONG).show();
				}
				else{
					Intent intent = new Intent(mContext, CaptureActivity.class);
					startActivityForResult(intent, APIConstants.SCANNIN_GREQUEST_CODE);
				}
			}
		});

		tv_menu.setOnClickListener(new View.OnClickListener() {
			@Override
			public void onClick(View view) {
				if(isEdit == false){
					isEdit = true;
					tv_menu.setText(R.string.tip_device_list_menu2);
					for(int i = 0; i < ll_device.getChildCount(); i++){
						DeviceInfoView deviceInfoView = (DeviceInfoView)ll_device.getChildAt(i);
						deviceInfoView.openMenu();
					}
				}
				else {
					isEdit = false;
					tv_menu.setText(R.string.tip_device_list_menu);
					for(int i = 0; i < ll_device.getChildCount(); i++){
						DeviceInfoView deviceInfoView = (DeviceInfoView)ll_device.getChildAt(i);
						deviceInfoView.closeMenu();
					}
				}
			}
		});

		getDeviceList();
		if (!BluetoothUtil.getInstance().isBluetoothEnable()) {
			BluetoothUtil.getInstance().enableBluetooth(this);
		}

		MZApplication.getInstance().addActivity(this);
	}

	@Override
	protected void onSaveInstanceState(Bundle outState)
	{
		super.onSaveInstanceState(outState);
	}

	@Override
	protected void onRestoreInstanceState(Bundle savedInstanceState)
	{
		super.onRestoreInstanceState(savedInstanceState);
	}

	private void showNotFindDialog()
	{
		final AlertDialog isExit = new AlertDialog.Builder(mContext).create();
		isExit.setTitle(R.string.tip_title);
		isExit.setMessage(getResources().getString(R.string.tip_can_not_find_the_device));
		isExit.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.commit_button), new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

				isExit.dismiss();
			}
		});
		isExit.show();
	}

	@Override
	public void onBackPressed() {
		if (!quit) {
			quit = true;
			Toast.makeText(this, R.string.toast_back_exit, Toast.LENGTH_SHORT).show();
			new Handler().postDelayed(new Runnable() {
				@Override
				public void run() {
					quit = false;
				}
			}, 2000);
		} else {
			MZApplication.getInstance().exit();
		}
	}

	private void getDeviceList(){
		ArrayList<DeviceInfoForUserData> devices = UserDataUtils.getInstance(mContext).getDeviceList();
		if(devices != null && devices.size() > 0){
			sv_introduce.setVisibility(View.GONE);
			sv_device.setVisibility(View.VISIBLE);
			ll_device.removeAllViews();
			for(int i = 0; i < devices.size(); i++){
				final DeviceInfoForUserData device = devices.get(i);
				final DeviceInfoView deviceInfoView = new DeviceInfoView(mContext, device.Ssid, device.MacAddress);
				ll_device.addView(deviceInfoView);
				deviceInfoView.setOnClickListener(new View.OnClickListener() {
					@Override
					public void onClick(View view) {
						if(!BluetoothUtil.getInstance().isBluetoothEnable()){
							return;
						}
						if(isEdit == true){
							final AlertDialog isExit = new AlertDialog.Builder(mContext).create();
							isExit.setTitle(R.string.tip_title);
							isExit.setMessage(getResources().getString(R.string.tip_unbind_the_device));
							isExit.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.cancel_button), new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int which) {
									isExit.dismiss();
								}
							});
							isExit.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.commit_button), new DialogInterface.OnClickListener() {
								public void onClick(DialogInterface dialog, int which) {
									BluetoothDevice device = BluetoothUtil.getInstance().getBTDevice(deviceInfoView.getMacAddress());
									try {
										boolean res = ClsUtils.removeBond(device.getClass(), device);
									} catch (Exception e) {
										e.printStackTrace();
									}
									UserDataUtils.getInstance(mContext).removeFromDeviceList(deviceInfoView.getSsid(), deviceInfoView.getMacAddress());
									isExit.dismiss();
									getDeviceList();

								}
							});

							isExit.show();
						}
						else{
							APIConstants.deviceInfo = new DeviceInfo(device.Ssid, device.MacAddress);
							Intent intent = new Intent(mContext, MainActivity.class);
							startActivity(intent);
						}
					}
				});
			}
			isEdit = true;
			tv_menu.setVisibility(View.VISIBLE);
			tv_menu.performClick();
		}
		else{
			tv_menu.setVisibility(View.GONE);
			sv_introduce.setVisibility(View.VISIBLE);
			sv_device.setVisibility(View.GONE);
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		super.onActivityResult(requestCode, resultCode, data);
		switch (requestCode) {
			case APIConstants.SCANNIN_GREQUEST_CODE:
				if (resultCode == RESULT_OK) {
					String result = data.getStringExtra(CaptureActivity.EXTRA_STRING);
					if (!TextUtils.isEmpty(result)) {
						//http://aifi.51tgt.com:9988/downloadapp.html?sn=TGT24170833157&wmac=A4D8CA7B7F88&bmac=4045DA963CB8&imei1=864772030440548&imei2=864772030440549
						//http://aifi.51tgt.com:9988/downloadapp.html?sn=TGT24170833232&wmac=A4D8CA7B7F88&bmac=4045DA7CAEE5&imei1=864772030440548&imei2=864772030440549
						Map<String, String> maps = CommUtil.URLRequest(result);
						Log.i("wufaeegegeg",maps.toString());
						if (maps != null && maps.containsKey("bmac") && maps.containsKey("sn")) {
							String temp = maps.get("bmac").toUpperCase();
							if (temp.length() == 12 || temp.length() == 17) {
								if (temp.length() == 12) {

									deviceMacAddress = temp.substring(0, 2) + ":" + temp.substring(2, 4) + ":" + temp.substring(4, 6) + ":" + temp.substring(6, 8) + ":" + temp.substring(8, 10) + ":" + temp.substring(10, 12);

								} else {
									deviceMacAddress = temp;


								}
							}

//							}
							deviceSSID = maps.get("sn").toString();
							System.out.println("ooooo" + deviceMacAddress + deviceSSID);
						}
						else
						{
							deviceMacAddress = deviceSSID = "";
						}
					}
					if (TextUtils.isEmpty(deviceMacAddress) || TextUtils.isEmpty(deviceSSID)) {
						showNotFindDialog();
						return;
					} else {
						//APIConstants.deviceInfo = new DeviceInfo(deviceSSID, deviceMacAddress);
						OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[1];
						params[0] = new OkHttpClientManager.Param("ssid", deviceSSID);
						new SendRequest(APIConstants.Get_Device_Status, params, new MyHandler(), 1);
					}
				} else {
					//showNotFindDialog();
				}
				break;
		}
	}

	@SuppressLint("HandlerLeak")
	class MyHandler extends Handler {
		@Override
		public void handleMessage(Message msg) {
			if (msg == null || msg.obj == null) {
				return;
			}
			if (msg.what == -10) {
				return;
			}
			HttpResponseData responseData = new HttpResponseData((String) msg.obj);
			if (responseData == null || responseData.status < 0 || responseData.data == null) {
				return;
			}
			switch (msg.what) {
				case 1:
					boolean is_active = false;
					if(responseData.data == null || responseData.data.size() == 0){
						showNotFindDialog();
						return;
					}
					Log.i("response",msg.toString());
					if (responseData.data.containsKey("new_version")) {
//                    APIConstants.deviceVersion = "T4_V2.1.6";//responseData.data.get("new_version").toString();
						if (responseData.data.containsKey("new_version") && !TextUtils.isEmpty(responseData.data.get("new_version").toString())) {
							APIConstants.deviceVersion = responseData.data.get("new_version").toString();
							setDialog.showVersionInfo(mContext);
							return;
						}
						return;
					}
					if (responseData.data.containsKey("device")) {
						LinkedTreeMap<String, Object> data = (LinkedTreeMap<String, Object>) responseData.data.get("device");
						if (data.containsKey("is_active") && data.get("is_active").toString().equals("true")) {
							is_active = true;
						}
						if (data.containsKey("is_active") && data.get("is_active").toString().equals("true")){
//							UserDataUtils.getInstance(mContext).setMacAddress(APIConstants.deviceInfo.getBluetoothMac());
//							UserDataUtils.getInstance(mContext).setSsid(APIConstants.deviceInfo.getSsid());
							UserDataUtils.getInstance(mContext).setDeviceList(deviceSSID, deviceMacAddress);
							getDeviceList();
						}
					}
					if(is_active == false){
						final AlertDialog isExit = new AlertDialog.Builder(mContext).create();
						isExit.setTitle(R.string.tip_title);
						isExit.setMessage(getResources().getString(R.string.tip_for_active_device));
						isExit.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.cancel_button), new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
								isExit.dismiss();
							}
						});
						isExit.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.commit_button), new DialogInterface.OnClickListener() {
							public void onClick(DialogInterface dialog, int which) {
								isExit.dismiss();
								OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[1];
								params[0] = new OkHttpClientManager.Param("ssid", deviceSSID);
								new SendRequest(APIConstants.Device_Active, params, new MyHandler(), 2);
							}
						});

						isExit.show();
					}
					break;
				case 2:
					if (responseData.data.containsKey("active") && responseData.data.get("active").toString().equals("true")) {
//						UserDataUtils.getInstance(mContext).setMacAddress(APIConstants.deviceInfo.getBluetoothMac());
//						UserDataUtils.getInstance(mContext).setSsid(APIConstants.deviceInfo.getSsid());

						UserDataUtils.getInstance(mContext).setDeviceList(deviceSSID, deviceMacAddress);
						getDeviceList();
					}
					else {
						TipUtil.showAlert(mContext,
								mContext.getResources().getText(R.string.tip_title).toString(),
								mContext.getResources().getText(R.string.tip_for_active_device_error).toString(),
								mContext.getResources().getText(R.string.commit_button).toString(),
								new TipUtil.OnAlertSelected() {
									@Override
									public void onClick(DialogInterface dialog, int whichButton) {
										dialog.dismiss();
									}
								});
					}
					break;
				default:
					break;
			}
		}
	}
}

