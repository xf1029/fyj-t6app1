package com.a51tgt.fyj.ui;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlertDialog;
import android.bluetooth.BluetoothDevice;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.graphics.drawable.AnimationDrawable;
import android.net.wifi.ScanResult;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.support.v7.widget.LinearLayoutManager;
import android.support.v7.widget.RecyclerView;
import android.text.TextUtils;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import android.widget.Toast;

import com.a51tgt.fyj.BuildConfig;
import com.a51tgt.fyj.MZApplication;
import com.a51tgt.fyj.R;
import com.a51tgt.fyj.abstract_face.OnNoticeUI;
import com.a51tgt.fyj.adapter.ScanWifiAdapter;
import com.a51tgt.fyj.bean.DeviceInfo;
import com.a51tgt.fyj.bean.DevicePackageInfo;
import com.a51tgt.fyj.bean.HttpResponseData;
import com.a51tgt.fyj.bean.PackageInfo;
import com.a51tgt.fyj.bean.UserDataUtils;
import com.a51tgt.fyj.bean.WxHttpResponseData;
import com.a51tgt.fyj.bluetooth.BluetoothUtil;
import com.a51tgt.fyj.bluetooth.ClsUtils;
import com.a51tgt.fyj.comm.APIConstants;
import com.a51tgt.fyj.comm.TcpConfig;
import com.a51tgt.fyj.net.OkHttpClientManager;
import com.a51tgt.fyj.net.SendRequest;
import com.a51tgt.fyj.ui.view.PackageInfoView;
import com.a51tgt.fyj.utils.CommUtil;
import com.a51tgt.fyj.utils.RestartAPPUtil;
import com.a51tgt.fyj.utils.TipUtil;
import com.a51tgt.fyj.utils.Util;
import com.google.gson.Gson;
import com.google.gson.internal.LinkedTreeMap;
import com.znq.zbarcode.CaptureActivity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by liu_w on 2017/9/13.
 */

public class DeviceInfoFragment extends Fragment implements View.OnClickListener, OnNoticeUI{

    private TextView tv_ssid, tv_language, tv_state_of_charge, tv_connect_device, tv_password, tv_app_version, tv_device_ssid, tv_connect_tip, tv_scan;
    private ImageView iv_modify_transalte_language, iv_modify_password, iv_modify_ssid, iv_signal;
    private ProgressBar pb_progress;
    private LinearLayout ll_package_info, ll_device_connect, ll_device_connecting, ll_device_info;
    private Button bt_scan, bt_flowmall;
    private boolean needCreateBond = true;
    private String deviceMacAddress = "";
    private String deviceSSID = "";
    public static final int RESULT_OK = -1;
    boolean isNewConnect = false;

    BroadcastReceiver broadcastReceiver = new BroadcastReceiver()
    {
        @Override
        public void onReceive(Context context, Intent intent)
        {
            boolean order_status = intent.getBooleanExtra("order_status", false);
            if(order_status == true && APIConstants.deviceInfo != null){
                getFlowPackage(APIConstants.deviceInfo.getSsid());
            }
            else{

            }
        }
    };

    public DeviceInfoFragment(){

    }
    public static DeviceInfoFragment newInstance(){
        DeviceInfoFragment fragment = new DeviceInfoFragment();
        return fragment;

    }

    @Override
    public void onCreate(Bundle savedInstanceState) {

        super.onCreate(savedInstanceState);

    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        View rootView = inflater.inflate(R.layout.fragment_device_info, container, false);

        ll_package_info = (LinearLayout) rootView.findViewById(R.id.ll_package_info);
        ll_device_connect = (LinearLayout) rootView.findViewById(R.id.ll_device_connect);
        ll_device_connecting = (LinearLayout) rootView.findViewById(R.id.ll_device_connecting);
        ll_device_info = (LinearLayout) rootView.findViewById(R.id.ll_device_info);

        tv_ssid = (TextView) rootView.findViewById(R.id.tv_ssid);
        tv_language = (TextView) rootView.findViewById(R.id.tv_language);
        tv_state_of_charge = (TextView) rootView.findViewById(R.id.tv_state_of_charge);
        tv_connect_device = (TextView) rootView.findViewById(R.id.tv_connect_device);
        tv_password = (TextView) rootView.findViewById(R.id.tv_password);
        tv_app_version = (TextView) rootView.findViewById(R.id.tv_app_version);
        tv_device_ssid = (TextView) rootView.findViewById(R.id.tv_device_ssid);
        tv_connect_tip = (TextView) rootView.findViewById(R.id.tv_connect_tip);
        tv_scan = (TextView) rootView.findViewById(R.id.tv_scan);

        iv_modify_transalte_language = (ImageView) rootView.findViewById(R.id.iv_modify_transalte_language);
        iv_modify_password = (ImageView) rootView.findViewById(R.id.iv_modify_password);
        iv_modify_ssid = (ImageView) rootView.findViewById(R.id.iv_modify_ssid);
        iv_signal  = (ImageView) rootView.findViewById(R.id.iv_signal);

        bt_scan = (Button) rootView.findViewById(R.id.bt_scan);
        bt_flowmall = (Button) rootView.findViewById(R.id.bt_flowmall);
        pb_progress = (ProgressBar) rootView.findViewById(R.id.pb_progress);

        ll_device_connect.setVisibility(View.VISIBLE);
        ll_device_info.setVisibility(View.GONE);
        if(APIConstants.deviceInfo != null) {
            tv_device_ssid.setText(APIConstants.deviceInfo.getSsid());
            tv_connect_tip.setText(getResources().getString(R.string.tip_connect) + APIConstants.deviceInfo.getSsid() + "...");
        }
        if (APIConstants.deviceInfo!=null) {

            deviceMacAddress = APIConstants.deviceInfo.getBluetoothMac();
            deviceSSID = APIConstants.deviceInfo.getSsid();
        }
        ll_device_connect.setOnClickListener(this);
        bt_scan.setOnClickListener(this);
        bt_flowmall.setOnClickListener(this);
        tv_scan.setOnClickListener(this);

        upDateFragment();

        iv_modify_transalte_language.setOnClickListener(this);
        if(APIConstants.deviceInfo != null)
            getFlowPackage(APIConstants.deviceInfo.getSsid());

        //注册接受的广播
        IntentFilter filter = new IntentFilter(APIConstants.BR_ORDER_STATUS);
        getActivity().registerReceiver(broadcastReceiver, filter);

        return rootView;
    }

    @Override
    public void onResume() {
        super.onResume();
        MZApplication.getInstance().setOnNoticeUiListener(this, OnNoticeUI.KEY_TYPE_DEVICE_INFO_FRAGMENT);
    }

    @Override
    public void onPause() {
        super.onPause();
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
    }

    //销毁Fragment时调用
    public void onDestroy() {
        getActivity().unregisterReceiver(broadcastReceiver);
        super.onDestroy();
    }

    @Override
    public void onClick(View v) {
        switch (v.getId()){
            case R.id.iv_modify_transalte_language:
                break;
            case R.id.iv_modify_password:
                break;
            case R.id.iv_modify_ssid:
                break;
            case R.id.ll_device_connect:
                ll_device_connect.setVisibility(View.GONE);
                ll_device_connecting.setVisibility(View.VISIBLE);
                connectDeviceForBT(deviceMacAddress, deviceSSID);
                break;
            case R.id.tv_scan:
                getActivity().finish();
                break;
            case R.id.bt_scan:
                Intent intent = new Intent(getActivity(), CaptureActivity.class);
                startActivityForResult(intent, APIConstants.SCANNIN_GREQUEST_CODE);
                break;
            case R.id.bt_flowmall:
                ((MainActivity)getActivity()).mViewPager.setCurrentItem(1);
                break;
            default:
                break;
        }
    }

    public void upDateFragment(){
        if(APIConstants.deviceInfo != null && !TextUtils.isEmpty(APIConstants.deviceInfo.getPassword())){
            tv_ssid.setText(APIConstants.deviceInfo.getOrginalSsid());
            tv_state_of_charge.setText(APIConstants.deviceInfo.getPower());
            tv_connect_device.setText(APIConstants.deviceInfo.getCurrConnections());
            tv_password.setText(APIConstants.deviceInfo.getPassword());
            tv_app_version.setText(APIConstants.deviceInfo.getAppVersion());
            iv_signal.setImageResource(CommUtil.getSignalImage(APIConstants.deviceInfo.getSignal1()));
            ll_device_info.setVisibility(View.VISIBLE);
            ll_device_connect.setVisibility(View.GONE);
            ll_device_connecting.setVisibility(View.GONE);
        }
    }

    @Override
    public void onActivityResult(int requestCode, int resultCode, Intent data)
    {
        super.onActivityResult(requestCode, resultCode, data);
        switch (requestCode) {
            case APIConstants.SCANNIN_GREQUEST_CODE:
                //从CaptureActivity扫描完成后返回的结果
                if (resultCode == RESULT_OK) {
                    String result = data.getStringExtra(CaptureActivity.EXTRA_STRING);
                    if (!TextUtils.isEmpty(result)) {
                        //http://aifi.51tgt.com:9988/downloadapp.html?sn=TGT*********&wmac=A4D8CA7B7F88&bmac=4045DA963CB8&imei1=864772030440548&imei2=864772030440549
                        Map<String, String> maps = CommUtil.URLRequest(result);
                        if (maps != null && maps.containsKey("bmac") && maps.containsKey("sn")) {
                            String temp = maps.get("bmac").toUpperCase();
                            if (temp.length() == 12) {
                                deviceMacAddress = temp.substring(0, 2) + ":" + temp.substring(2, 4) + ":" + temp.substring(4, 6) + ":" + temp.substring(6, 8) + ":" + temp.substring(8, 10) + ":" + temp.substring(10, 12);
                            }
                            deviceSSID = maps.get("sn").toString();
                            APIConstants.isScanNewDevice = true;
                        }
                    }
                    if (TextUtils.isEmpty(deviceMacAddress) || TextUtils.isEmpty(deviceSSID)) {
                        Toast.makeText(getActivity(), R.string.tip_can_not_find_device_mac_address, Toast.LENGTH_LONG).show();
                        return;
                    } else {
                        ll_device_info.setVisibility(View.GONE);
                        ll_device_connect.setVisibility(View.GONE);
                        ll_device_connecting.setVisibility(View.VISIBLE);
                        isNewConnect = true;
                        connectDeviceForBT(deviceMacAddress, deviceSSID);
                    }
                } else {
                }
            break;
        }
    }

    @Override
    public void onNotice(int NOTICE_TYPE, Object object) {
        switch (NOTICE_TYPE){
            case OnNoticeUI.NOTICE_TYPE_BLUETOOTH_CONNECTED:
                APIConstants.isBluetoothConnection = true;
                getDeviceInfo();
                break;
            case OnNoticeUI.NOTICE_TYPE_BLUETOOTH_CANNOT_CONNECTED:
                if(isNewConnect == false && getActivity() != null){
                    TipUtil.showAlert(getActivity(),
                            getActivity().getResources().getText(R.string.tip_title).toString(),
                            getActivity().getResources().getText(R.string.tip_not_connected).toString(),
                            getActivity().getResources().getText(R.string.commit_button).toString(),
                            new TipUtil.OnAlertSelected() {
                                @Override
                                public void onClick(DialogInterface dialog, int whichButton) {
                                    dialog.dismiss();
                                }
                            });
                    APIConstants.isBluetoothConnection = false;
                    ll_device_connect.setVisibility(View.VISIBLE);
                    ll_device_info.setVisibility(View.GONE);
                    ll_device_connecting.setVisibility(View.GONE);
                    isNewConnect = true;
                }
                break;
            case OnNoticeUI.NOTICE_TYPE_BT_DEVICE_INFO:
                if (null==object || object.equals("")){
                    return;
                }
                try {

                    APIConstants.deviceInfo = new Gson().fromJson(object.toString(),DeviceInfo.class);
                    if(APIConstants.deviceInfo != null)
                    {
                        upDateFragment();
                        //判断设备是否被激活
                        OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[1];
                        params[0] = new OkHttpClientManager.Param("ssid", APIConstants.deviceInfo.getSsid());
                        new SendRequest(APIConstants.Get_Device_Status, params, new MyHandler(), 2);
                    }
                    else {
                        Toast.makeText(getActivity(), R.string.tip_can_not_get_device_info, Toast.LENGTH_LONG ).show();
                    }


                } catch (Exception e) {
                    e.printStackTrace();
                }
                break;
        }
    }

    public void getDeviceInfo(){
        BluetoothUtil.getInstance().sendMessage(TcpConfig.GET_DEVICE_INFO);
    }

    private void connectDeviceForBT(final String address, String ssid){
        if(TextUtils.isEmpty(ssid))
            ssid = APIConstants.deviceInfo.getSsid();
        tv_connect_tip.setText(getResources().getString(R.string.tip_connect) + ssid + "...");
        if(BluetoothUtil.getInstance().initBluetooth()) {
            BluetoothUtil.getInstance().setBtAddress(address);
            if (!BluetoothUtil.getInstance().isBluetoothEnable()) {
                BluetoothUtil.getInstance().enableBluetooth(getActivity());//发起打开蓝牙

            } else {
                BluetoothUtil.getInstance().stopBluetoothService();
                BluetoothUtil.getInstance().setBtName("tuge_debugtool");
                BluetoothUtil.getInstance().startBluetoothService(getActivity());

                try {
                    BluetoothDevice device = BluetoothUtil.getInstance().getBTDevice(address);
                    if(device.getBondState() == BluetoothDevice.BOND_BONDED){
                        needCreateBond = false;
                        MZApplication.getInstance().runBackGround(new Runnable() {
                            @Override
                            public void run() {
                                BluetoothUtil.getInstance().connectDevice(address, true);
                            }
                        }, 500);
                        MZApplication.getInstance().runMainThread(hiddenNotice, 10*1000);
                    } else {
                        try {
                            //通过工具类ClsUtils,调用createBond方法
                            ClsUtils.createBond(device.getClass(), device);
                        } catch (Exception e) {
                            // TODO Auto-generated catch block
                            e.printStackTrace();
                        }
                        BluetoothUtil.getInstance().setBondedCallback(new BluetoothUtil.BondedCallback() {
                            @Override
                            public void BondBonded() {
                                MZApplication.getInstance().runMainThread(hiddenNotice, 10*1000);
                            }
                        });
                        Toast.makeText(getActivity(), R.string.tip_match_bluetooth, Toast.LENGTH_LONG).show();
                        ll_device_info.setVisibility(View.GONE);
                        ll_device_connect.setVisibility(View.VISIBLE);
                        ll_device_connecting.setVisibility(View.GONE);

                        tv_device_ssid.setText(deviceSSID);
                        tv_connect_tip.setText(getResources().getString(R.string.tip_connect) + deviceSSID + "...");
                    }
                }
                catch (Exception e){
                    TipUtil.showAlert(getActivity(),
                            getActivity().getResources().getText(R.string.tip_title).toString(),
                            e.getMessage(),
                            getActivity().getResources().getText(R.string.commit_button).toString(),
                            new TipUtil.OnAlertSelected(){
                                @Override
                                public void onClick(DialogInterface dialog, int whichButton) {
                                    Intent intent = new Intent(getActivity(), CaptureActivity.class);
                                    startActivityForResult(intent, APIConstants.SCANNIN_GREQUEST_CODE);
                                    dialog.dismiss();
                                }
                            });
                }

            }
        } else {
            String msg = getResources().getString(R.string.error_mobile_phone_not_support_bluetooth);
        }
    }

    Runnable hiddenNotice = new Runnable() {
        @Override
        public void run() {
        }
    };

    private void getFlowPackage(String ssid){
        ll_package_info.removeAllViews();
        OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[2];
        params[0] = new OkHttpClientManager.Param("device_no",  ssid);
        params[1] = new OkHttpClientManager.Param("useing","1");
        new SendRequest(APIConstants.Get_Flow_Package, params, new MyHandler(), 1);
    }

    @SuppressLint("HandlerLeak")
    class MyHandler extends Handler {

        @Override
        public void handleMessage(Message msg) {
            if (msg == null || msg.obj == null) {
                return;
            }
            if(msg.what == -10){
                return;
            }

            switch (msg.what){
                case 1: {
                    WxHttpResponseData responseData = new WxHttpResponseData((String) msg.obj);
                    if (responseData == null || responseData.status < 0 || responseData.data == null) {
                        return;
                    }
                    if (responseData.data.containsKey("device_order")) {
                        ll_package_info.removeAllViews();
                        ArrayList<LinkedTreeMap<String, Object>> products = (ArrayList<LinkedTreeMap<String, Object>>) responseData.data.get("device_order");
                        if (products == null || products.size() == 0) {
                            ll_package_info.setVisibility(View.GONE);
                            return;
                        }
                        try {
                            for (int i = 0; i < products.size(); i++) {
                                LinkedTreeMap<String, Object> product = products.get(i);
                                ll_package_info.addView(new PackageInfoView(MZApplication.getContext(), new PackageInfo(product)));
                            }
                        }catch (Exception exception ){

                        }

                        //ll_package_info.addView();
                    }
                }
                    break;
                case 2:{
                    HttpResponseData responseData = new HttpResponseData((String) msg.obj);
                    if (responseData == null || responseData.status < 0 || responseData.data == null) {
                        return;
                    }
                    boolean is_active = false;
                    if (responseData.data.containsKey("device")) {
                        LinkedTreeMap<String, Object> data = (LinkedTreeMap<String, Object>) responseData.data.get("device");
                        if (data.containsKey("is_active") && data.get("is_active").toString().equals("true")) {
                            is_active = true;
                            upDateFragment();
                            if(APIConstants.deviceInfo != null)
                                getFlowPackage(APIConstants.deviceInfo.getSsid());
                        }
                        if(is_active == false){
                            final AlertDialog isExit = new AlertDialog.Builder(getActivity()).create();
                            isExit.setTitle(R.string.tip_title);
                            isExit.setMessage(getResources().getString(R.string.tip_for_active_device));
                            isExit.setButton(AlertDialog.BUTTON_NEGATIVE, getResources().getString(R.string.cancel_button), new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    ll_device_connect.setVisibility(View.VISIBLE);
                                    ll_device_info.setVisibility(View.GONE);
                                    ll_device_connecting.setVisibility(View.GONE);
                                    //BluetoothUtil.getInstance().stopBluetoothService();
                                    isExit.dismiss();
                                }
                            });
                            isExit.setButton(AlertDialog.BUTTON_POSITIVE, getResources().getString(R.string.commit_button), new DialogInterface.OnClickListener() {
                                public void onClick(DialogInterface dialog, int which) {
                                    isExit.dismiss();
                                    OkHttpClientManager.Param[] params = new OkHttpClientManager.Param[1];
                                    params[0] = new OkHttpClientManager.Param("ssid", APIConstants.deviceInfo.getSsid());
                                    new SendRequest(APIConstants.Device_Active, params, new MyHandler(), 3);
                                }
                            });

                            isExit.show();
                        }
                    }
                }
                    break;
                case 3:{
                    HttpResponseData responseData = new HttpResponseData((String) msg.obj);
                    if (responseData == null || responseData.status < 0 || responseData.data == null) {
                        return;
                    }
                    if (responseData.data.containsKey("active") && responseData.data.get("active").toString().equals("true")) {
                        UserDataUtils.getInstance(getActivity()).setMacAddress(APIConstants.deviceInfo.getBluetoothMac());
                        UserDataUtils.getInstance(getActivity()).setSsid(APIConstants.deviceInfo.getSsid());
                        if(APIConstants.deviceInfo != null)
                            getFlowPackage(APIConstants.deviceInfo.getSsid());
                        upDateFragment();
                    }
                    else {
                        TipUtil.showAlert(getActivity(),
                                getActivity().getResources().getText(R.string.tip_title).toString(),
                                getActivity().getResources().getText(R.string.tip_for_active_device_error).toString(),
                                getActivity().getResources().getText(R.string.commit_button).toString(),
                                new TipUtil.OnAlertSelected() {
                                    @Override
                                    public void onClick(DialogInterface dialog, int whichButton) {
                                        dialog.dismiss();
                                    }
                                });
                    }
                }
                    break;
                default:
                    break;
            }
        }
    }
}
